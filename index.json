[{"content":"Zeppelin on Kubernetes 를 주로 참고하였다.\nZepplin on k8s 설치 curl -s -O https://raw.githubusercontent.com/apache/zeppelin/master/k8s/zeppelin-server.yaml kubectl apply -f zepplin-server.yaml 이대로 실행하면 apache/zepplin-server:... 이미지를 찾을 수 없다며 ImagePullingBackoff 오류가 발생한다. docker hub 를 확인해보면 apache/zepplin 는 있지만 apache/zepplin-server 가 없는 것을 확인할 수 있다. 따라서 config 에서 해당 이미지를 사용하는 부분을 아래와 같이 교체한다.\n# ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin-interpreter:0.10.0 ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin:0.10.0 ... containers: - name: zeppelin-server # image: apache/zeppelin-server:0.10.0 image: apache/zepplin:0.10.0 혹은\nsed -i \u0026#39;s/apache\\/zeppelin-interpreter/apache\\/zeppelin/g\u0026#39; zeppelin-server.yaml sed -i \u0026#39;s/apache\\/zeppelin-server/apache\\/zeppelin/g\u0026#39; zeppelin-server.yaml 서비스가 정상실행되었다면 대시보드를 확인해보자. Remote 에서 확인하기 위해 임시로 address 를 추가하였다.\nkubectl port-forward zeppelin-server 8080:80 --address=0.0.0.0 yaml 에서 추가로 변경하기 좋은 키워드 Environment variable Value Description ZEPPELIN_RUN_MODE k8s Make Zeppelin run interpreter on Kubernetes ZEPPELIN_K8S_PORTFORWARD true Enable port forwarding from local Zeppelin instance to Interpreters running on Kubernetes ZEPPELIN_K8S_CONTAINER_IMAGE : Zeppelin interpreter docker image to use ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE : Spark docker image to use ZEPPELIN_K8S_NAMESPACE Kubernetes namespace to use KUBERNETES_AUTH_TOKEN Kubernetes auth token to create resources 막상 k8s mode 를 설정하니, zeppelin notebook 에서 명령이 제대로 실행되지 않아, 추가로 분석이 필요하다..\nSpark on k8s 설치 TODO\nCustom zeppelin image? 가이드 문서에서는 현재 interpreter 와 server 모두 같은 이미지를 사용하고 있다고 언급되어 있다.\nPV 설정, zeppelin-server.yaml 에서 interpreter 이미지 폴더를 mount 해서 custom interpreter 를 사용하도록 설정할 수 있다.\n기타 server 와 interpreter 를 위한 Dockerfile 도 zeppline github 에서 찾을 수 있지만 테스트가 필요하다.\nMulti-user 공식에서는 shiro 를 사용한다. DEX 를 붙일 수 있는 방법은 없을까..?\nReference Zeppelin on Kubernetes with Connections naver place zeppelin\nimplementaing apache zeppelin in\n","permalink":"https://fedaeho.github.io/posts/2022-07-26-zepplin-with-k8s/","summary":"Zeppelin on Kubernetes 를 주로 참고하였다.\nZepplin on k8s 설치 curl -s -O https://raw.githubusercontent.com/apache/zeppelin/master/k8s/zeppelin-server.yaml kubectl apply -f zepplin-server.yaml 이대로 실행하면 apache/zepplin-server:... 이미지를 찾을 수 없다며 ImagePullingBackoff 오류가 발생한다. docker hub 를 확인해보면 apache/zepplin 는 있지만 apache/zepplin-server 가 없는 것을 확인할 수 있다. 따라서 config 에서 해당 이미지를 사용하는 부분을 아래와 같이 교체한다.\n# ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin-interpreter:0.10.0 ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin:0.10.0 ... containers: - name: zeppelin-server # image: apache/zeppelin-server:0.10.0 image: apache/zepplin:0.10.0 혹은\nsed -i \u0026#39;s/apache\\/zeppelin-interpreter/apache\\/zeppelin/g\u0026#39; zeppelin-server.","title":"On-prem k8s 에 Zepplin 설치하기"},{"content":"EC2 Windows Server Setting Guide 인스턴스 시작 을 눌러 새 인스턴스 생성 왼쪽 메뉴에서 \u0026ldquo;프리 티어만\u0026rdquo; 체크박스를 선택한 후, Windows 검색. Microsoft Windows Server 2019 Base 선택 Free-tier 사용 위해 t2.micro 선택 인스턴스 목록에서 생성한 인스턴스를 확인할 수 있음. 인스턴스 ID를 클릭하여 세부 내용 확인 인스턴스 요약 메뉴의 우측 상단에 위치한 연결 버튼 클릭 RDP 클라이언트 메뉴를 선택한 후, 원격 데스크톱 파일 다운로드 RDP(Remote Desktop Protocol) 클라이언트를 통해서 서버에 VNC 처럼 리모트 연결이 가능 Windows Remote Desktop 클라이언트는 하기 링크에서 다운로드 가능 Mac OS Windows 암호 가져오기 메뉴를 클릭하고, 기존에 AWS에서 등록하였던 키페어를 업로드하여 암호 보기 다운로드 받은 .rdp 파일을 실행한 후 해당 암호 입력 Ul;pie=Er?eB8BfrZ\u0026amp;Y4Q$xPtTLnnKXJ 제어판 \u0026gt; 국가 또는 지역 \u0026gt; 관리자 옵션 에서 \u0026ldquo;유니코드를 지원하지 않는 프로그램용 언어\u0026quot;를 한국어(대한민국)으로 설정 Multiple Remote Desktop Sessions For The Same User Jun 25, 2013 by Beaulin Twinkle\nBy default Windows Server 2008 and Windows Server 2012 are set to allow only a single session for a user through remote desktop. But sometimes you may need to allow multiple remote desktop sessions for A single user at the same time. For allowing concurrent same user sessions you need to change the terminal server settings in the registry on the server. Below is the step by step instruction to fix the problem. Follow the below steps to do the registry change. Steps To Allow Multiple Remote Desktop Sessions Per User: On the Windows Server 2008 go to Start –\u0026gt; Run (In Windows Server 2012 go to search, type in run and click Run Desktop app) and type in regedit and press enter button to launch the Registry Editor. In the Registry Editor go to HKEY_LOCAL_MACHINE\\ System\\ CurrentControlSet\\ Control\\ TerminalServer. On selecting the TerminalServices Registry, you can see the registry key fSingleSessionPerUser on the right panel. If the key is not available then create a new key by right clicking TerminalServices and slecting New –\u0026gt; DWORD. Double click or right-click –\u0026gt; modify the key fSingleSessionPerUser. Change the value from 1 to 0. The value 1 means single session for each user and 0 means multiple sessions for each user. Click OK for the new settings to take effort. https://github.com/stascorp/rdpwrap\nEnable Multiple RDP Sessions Log into the server, where the Remote Desktop Services are installed. Open the start screen (press the Windows key) and type gpedit.msc and open it. Go to Computer Configuration \u0026gt; Administrative Templates \u0026gt; Windows Components \u0026gt; Remote Desktop Services \u0026gt; Remote Desktop Session Host \u0026gt; Connections. Set Restrict Remote Desktop Services user to a single Remote Desktop Services session to Disabled. Double click Limit number of connections and set the RD Maximum Connections allowed to 999999. You could either do it with Group Policy: Computer Configuration\\Administrative Templates\\Windows Components\\Remote Desktop Services\\ Remote Desktop Session Host\\Connections\\\nRestrict Remote Desktop Services users to a single Remote Desktop Services session value: Disabled Next, double-click on Limit number of connections and then set the RD Maximum Connections allowed to 999999. Or you could edit the registry as follows:\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\nfSingleSessionPerUser value: 0 fdenyTSConnections value: 0 https://blog.boxcorea.com/wp/archives/2380\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-WebRequest -Uri \u0026#34;https://www.python.org/ftp/python/3.7.6/python-3.7.6.exe\u0026#34; -OutFile \u0026#34;c:/temp/python-3.7.6.exe\u0026#34; mkdir c:/temp/python-3.7.6.exe InstallAllUsers=1 PrependPath=1 Include_test=0 ","permalink":"https://fedaeho.github.io/posts/2021-01-09-ec2_guide/","summary":"EC2 Windows Server Setting Guide 인스턴스 시작 을 눌러 새 인스턴스 생성 왼쪽 메뉴에서 \u0026ldquo;프리 티어만\u0026rdquo; 체크박스를 선택한 후, Windows 검색. Microsoft Windows Server 2019 Base 선택 Free-tier 사용 위해 t2.micro 선택 인스턴스 목록에서 생성한 인스턴스를 확인할 수 있음. 인스턴스 ID를 클릭하여 세부 내용 확인 인스턴스 요약 메뉴의 우측 상단에 위치한 연결 버튼 클릭 RDP 클라이언트 메뉴를 선택한 후, 원격 데스크톱 파일 다운로드 RDP(Remote Desktop Protocol) 클라이언트를 통해서 서버에 VNC 처럼 리모트 연결이 가능 Windows Remote Desktop 클라이언트는 하기 링크에서 다운로드 가능 Mac OS Windows 암호 가져오기 메뉴를 클릭하고, 기존에 AWS에서 등록하였던 키페어를 업로드하여 암호 보기 다운로드 받은 .","title":"EC2에서 Windows Server Instacne 설정"},{"content":"GAN Definition GANs : Generative Adversarial Networks\nGenerative : 생성의 Adversarial : 대립 관계의, 적대적인 Generator(생성자) 와 Discriminator(감별자) 두 개의 네트워크로 구성되어 있음\n일반적인 비유 : 지폐 위조범과 경찰 위조범은 더욱 진짜같은 가짜 위조지폐를 만드려고 한다 : Generator 경찰은 지폐 감별능력을 높여 위조지폐를 잡아야 한다 : Discriminator 최종 : 위조범의 능력이 정점에 달하면, 경찰은 진짜와 위조 지폐를 찍어서 맞추는 수밖에 없다.($D(x)=\\frac{1}{2},p=0.5$)\n경찰의 능력이 좋아지면, 위조범은 더 정밀한 위폐를 만들어야한다. -\u0026gt; 위조범의 능력이 좋아지면 경찰도 감별능력을 높여야한다. -\u0026gt; 피드백 실제로는 이렇게 이상적으로 돌아가지 않는다.. mode-collapse : 위조범이 1000원만 기가막히게 만들었고 경찰이 구분을 못한다. -\u0026gt; 계속 1000원만 만들것이다. Equations $x$ : sample from real data\n$z \\sim p_z$ : latent variable ($p_z$ : generally gaussian)\n$G(z) \\sim p_g$\nobjective\nGenerator : $p_g=p_{data}$\nDiscriminator : $D(x)=1, D(G(z))=0$ $$ V(D,G) = \\mathbb{E}{x\\sim p{data}(x)}[\\log{D(x;\\theta_D)}]+ \\mathbb{E}{z\\sim p{z}(z)}[\\log{(1-D(G(z;\\theta_G);\\theta_D)}] $$\nD가 완벽할 때\n$x \\sim p_{data}(x), D(x)=0 \\implies 1st~term=0$ $z \\sim p_{z}(z), D(G(z))=0 \\implies 2nd~term=0$ $\\therefore V(D,G)=0 \\implies \\max_{D} V(D,G)$ D의 목적은 V 값의 최대화 G가 완벽할 때\n1st term 은 z와 관계없으므로 constant $z \\sim p_{z}(z), D(G(z))=1 \\implies 2nd~term=-\\infty$ $\\therefore V(D,G)=-\\infty \\implies \\min_{G} V(D,G)$ G의 목적은 V값의 최소화 re-cap objective : find $G,D$ which satisfy $\\min_{G} \\max_{D} V(D,G)$\n임의의 G에 대한 최적의 D : $D^{*}G(x) = \\frac{p{data}(x)}{p_{data}(x) + p_g(x)}$\n$\\max_D V(D,G) = C(G) = -\\log(4) + 2 \\cdot JSD(p_{data}||p_g)$\nre-cap objective : $\\min_G C(G) : \\min_G JSD(p_{data}||p_g)$\nJSD(Jensen Shannon Divergence) : sum of commuted KL-divergence JSD 측도를 최소화하는 문제와 동일 G는 임의 형태의 pdf -\u0026gt; non-parametric 한 G를 만들기 위해 NN을 사용 -\u0026gt; GANs Pros/Cons GAN : sampler\n최적화시에 $p_g = p_{data}$ 가 되도록하는 $G(z) \\sim p_g$을 만든다. $z$의 mapping function 을 구하는 것이 목적이므로, $x \\sim p_{data}$ 를 직접 구하는 것과는 다르다. : 데이터 분포를 직접 구하는 것이 아니다. 따라서, 데이터 분포 자체를 구하기 위해 tracktable likelihood 를 가정하는 다른 모델과 다르게, likelihood-free 하다. GAN 학습의 어려움\nConvergence D,G 를 동시에 구한다 -\u0026gt; saddle point 를 고려하지 않으면 학습이 영원이 이루어지지 않을 수 있다. mode collapse NN으로 푸는 현실적인 GAN의 경우, 매 단계마다 최적의 $D^{*}$ 를 구할 수 없다. 따라서, value function 을 G와 D에 대해 번갈아가면서 풀어야한다. $G^{*} = \\min_{G} \\max_{D} V(G,D)$ G,D 에 대해 번갈아가며 풀경우, 위 식은 $G^{*} = \\max_{D} \\min_{G} V(G,D)$ 와 다르지 않다. $\\min_{G}$ 를 먼저 푼다. : D가 가장 헷갈려 할만한 샘플 하나만 만들면 땡 -\u0026gt; 쉬운것만 만드는 G가 된다. -\u0026gt; latent variable $z$에 대한 변화가 크지 않은 $G(z)$가 만들어진다. Training $\\max_{D} V(G,D)$ 를 먼저 푼다. 고정된 G를 두고 다음과 같은 데이터를 D에게 제공한다. 생성기 데이터와 라벨 : (G(z), 0.0) 진짜 데이터와 라벨 : (x,1.0) Discriminator 에만 back-prop Loss function : $L_D (\\theta_G, \\theta_D) = -V(G,D) = - \\mathbb{E}{x\\sim p{data}(x)}[\\log{D(x;\\theta_D)}] - \\mathbb{E}{z\\sim p{z}(z)}[\\log{(1-D(G(z;\\theta_G);\\theta_D)}]$ : binary crossentropy 와 동일함 $\\theta_D$ 만 업데이트 고정된 D를 두고 G를 업데이트 한다 Loss function : $L_G (\\theta_G, \\theta_D) = - \\mathbb{E}{z\\sim p{z}(z)}[\\log{(1-D(G(z;\\theta_G);\\theta_D)}]$ 위 식으로 풀면($G=arg\\min_{G}L_G$) G가 처음에 만드는 G(z)는 당연히 이상할 확률이 높으므로, 학습 초기에 값이 잘 변하지 않는다. 따라서, 함수를 $L_G (\\theta_G, \\theta_D) = - \\mathbb{E}{z\\sim p{z}(z)}[\\log{D(G(z;\\theta_G);\\theta_D)}]$ 로 바꾸어, $G=arg\\max_{G}L_G$ 찾는 문제로 변경한다. 이후 $\\theta_G$ 만 업데이트 Example DCGAN(Deep-convolutional GAN) Maxpooling, Upsampling 대신 strides\u0026gt;1 convolution 을 사용하여 feature map 크기를 조정하는 방법을 학습하게 함 Dense 는 z 받을때만 Batch normalization 을 하지만, G 출력과 D 입력에는 사용 Generator에서는 출력에 tanh(MNIST는 sigmoid), 나머지는 ReLU Discriminator에서는 전무 Leaky ReLU, alpha=0.2 ","permalink":"https://fedaeho.github.io/posts/2020-10-26-gan_basic/","summary":"GAN Definition GANs : Generative Adversarial Networks\nGenerative : 생성의 Adversarial : 대립 관계의, 적대적인 Generator(생성자) 와 Discriminator(감별자) 두 개의 네트워크로 구성되어 있음\n일반적인 비유 : 지폐 위조범과 경찰 위조범은 더욱 진짜같은 가짜 위조지폐를 만드려고 한다 : Generator 경찰은 지폐 감별능력을 높여 위조지폐를 잡아야 한다 : Discriminator 최종 : 위조범의 능력이 정점에 달하면, 경찰은 진짜와 위조 지폐를 찍어서 맞추는 수밖에 없다.($D(x)=\\frac{1}{2},p=0.5$)\n경찰의 능력이 좋아지면, 위조범은 더 정밀한 위폐를 만들어야한다. -\u0026gt; 위조범의 능력이 좋아지면 경찰도 감별능력을 높여야한다.","title":"GAN Basic"},{"content":"팀에서 운영하고 있는 Jira, Confluence 가 외부 접속이 가능함에도 불구하고 HTTPS 인증서가 설치되어 있지 않았다. 이외에도 보안상 취약점이 여럿 발견되었기에, Apache Proxy 설정 을 참고하여 설정하였다.\nVirtualHost 구성하기 팀에서 운영하는 Jira/Confluence 는 Atlassian 설정 파일을 외부 접근 가능한 주소로 바꾸고 DNS 업체에 해당 주소에 맞게 도메인만 물리고 포트 번호를 숨기지 않았다. 따라서, 포트번호 없이 기본 주소로 요청이 올 때도 Jira/Confluence 서비스인 것처럼 처리하기 위해 Apache VirtualHost 를 구성해서 리버스 프록시를 만들기로 했다. (Nginx, Tomcat 도 가능하고 Jira/Confluence 역시 Tomcat 위에서 돌아가지만, Apache 가 가장 편했다.)\nAtlassian 홈페이지에서 다운로드한 Installer 를 그대로 따라서 설치하면 아래와 같은 포트로 설치된다.(Jira/Confluence 모두 동일한 서버에 설치했다.)\nService Name Address Default Port Jira jira.xxx.xxx 8080 Confluence wiki.xxx.xxx 8090 Apache VirtualHost 구성 (Apache 가 이미 설치되어 있다는 가정하에) ubuntu에서 /etc/apache2/sites-available 의 경로를 확인해보면 기본값으로 000-default.conf라는 파일이 보인다. 기본 설정 파일을 복사하여 Jira 와 Confluence(이하 Wiki) 각각에 맞게 다시 이름을 붙이고 아래와 같이 편집했다.\n001-jira.conf \u0026lt;VirtualHost *:80\u0026gt; ServerName jira.xxx.xxx ServerAdmin jira@xxx.xxx \u0026lt;IfModule mod_proxy.c\u0026gt; ProxyRequests off ProxyVia off \u0026lt;Proxy *\u0026gt; Require all granted \u0026lt;/Proxy\u0026gt; ProxyPass / http://localhost:8080/ ProxyPassReverse / http://localhost:8080/ \u0026lt;/IfModule\u0026gt; \u0026lt;/VirtualHost\u0026gt; 002-wiki.conf \u0026lt;VirtualHost *:80\u0026gt; ServerName wiki.xxx.xxx ServerAdmin wiki@xxx.xxx \u0026lt;IfModule mod_proxy.c\u0026gt; ProxyRequests off ProxyVia off \u0026lt;Proxy *\u0026gt; Require all granted \u0026lt;/Proxy\u0026gt; ProxyPass / http://localhost:8090/ ProxyPassReverse / http://localhost:8090/ \u0026lt;/IfModule\u0026gt; \u0026lt;/VirtualHost\u0026gt; 80번 포트로 들어오는 모든 요청에 대해, ServerName에 적힌 요청이 들어오면 해당 conf 파일이 이를 담당하여 전달한다.\nMod Proxy 설정 Apache 설치시에 proxy 설정을 할 수 있는 mod_proxy 모듈이 같이 설치가 되지만, 기본적으로 사용설정이 되어있지는 않기에 모듈을 키고 apache 를 재부팅해야 정상작동한다. 위에서 작성한 VirtualHost 설정 또한 추가 한뒤 reload 하자.\n# apache 모듈 구동 sudo a2enmod proxy sudo a2enmod proxy_http sudo a2enmod proxy_balancer sudo a2enmod lbmethod_byrequests # VirtualHost 추가 sudo a2ensite 001-jira sudo a2ensite 002-wiki # Apache Reload sudo service apache2 reload 프록시 연결 설정 Apache VirtualHost 만으로는 Jira/Wiki 가 정상적으로 Proxy 되지 않는다. 따라서 Atlassian 서비스들이 호출될 때 Proxy를 통해 불릴 수 있음을 알려야 한다.\nAtlassian 제품들의 Proxy 설정 Confluence 설정 변경 기본 설치를 한 경우 /opt/atlassian/confluence/conf/server.xml에서 서버 설정을 확인할 수 있다. 단순히 프록시만 연결하고자 하는 경우에는 아래의 내용을 설정파일에 추가(혹은 설정 파일 내부 주석 해제후 편집)하면 된다.\n\u0026lt;Connector port=\u0026#34;8090\u0026#34; ... scheme=\u0026#34;http\u0026#34; proxyName=\u0026#34;wiki.xxx.xxx\u0026#34; proxyPort=\u0026#34;80\u0026#34; ... /\u0026gt; 이를 아래와 같이 변경하면, 기존처럼 포트를 직접 입력해서 접근하는 것을 막을 수 있다.(즉, wiki.xxx.xxx:8090 으로 접속하면 기존과 다르게 에러가 발생한다.) Proxy 하고자 하는 서버가 별도로 존재하는 경우 address를 해당 서버로 변경할 수도 있다. 이 설정은 Proxy 로 들어온 요청도 대응할 수 있게 만들어준다.\n\u0026lt;Connector port=\u0026#34;8090\u0026#34; ... address=\u0026#34;localhost\u0026#34; scheme=\u0026#34;http\u0026#34; proxyName=\u0026#34;wiki.xxx.xxx\u0026#34; proxyPort=\u0026#34;80\u0026#34; ... /\u0026gt; Jira 설정 변경 Jira 또한 /opt/atlassian/jira/conf/server.xml에 있는 설정파일을 변경하면 되지만, confluence 와 다르게 address 옵션을 설정하지 않았다. 따라서, 여전히 jira.xxx.xxx:8080 주소로 접속이 가능하다. (Jira 구조 상의 문제인지 다행히도(?) 로그인은 불가능하다.) 이는, Jira 에서 사용자를 통합 관리하기 때문에, confluence 에서 Jira 서버를 볼 수 있어야 로그인이 가능하기 때문이다.\n\u0026lt;Connector port=\u0026#34;8080\u0026#34; ... scheme=\u0026#34;http\u0026#34; proxyName=\u0026#34;jira.xxx.xxx\u0026#34; proxyPort=\u0026#34;80\u0026#34; ... /\u0026gt; 마무리 Atlassian 제품들을 모두 재시작 한다.\nsudo service confluence stop sudo service jira stop sudo service jira start sudo service confluence start 모든 설정이 끝난 후, 각 제품의 환경설정으로 가서 Base URL을 변경해주면 된다.\nHTTPS 설정하기 왜 HTTPS? 최근에 사용하는 대부분의 브라우저는 https가 아니면 보안 경고를 보이면서 서비스를 제한한다. 이러한 서비스에 접속하는 경우 크롬 브라우저의 주소창 옆에 \u0026ldquo;안전하지 않음(Not Secure)\u0026rdquo; 이라는 문구가 항상 보이게 된다. 이는 클라이언트와 유저간에 전달되는 패킷이 암호화되지 않은 채로 전송되기 때문인데, 이 자체만으로 심각한 보안 문제를 야기하기는 어렵다. 그럼에도, HTTPS 연결은 패킷을 암호화하여 전달하므로 더욱 안전하며, 브라우저 주소창에 자물쇠와 함께 \u0026ldquo;안전함\u0026quot;이라는 마크를 확인할 수 있다.\nHTTPS를 쓰기 위해서는 SSL인증서를 받아야 하는데, 원개인 SSL이 아닌 Root CA 를 발급받기 위해서는 비싼 가격을 지불해야 했다. 하지만, 지금은 https 보급을 위한 비영리 기관 Let\u0026rsquo;s Encrypt를 통해 무료로 발급 받을 수 있다.\nCertbot 사용하기 VirtualHost 설정이 끝나있어야 한다.\nLet\u0026rsquo;s encrypt에서는 certbot이라는 툴을 제공한다. 여기에서는 Certbot을 설치한다.\nShell에서 아래와 같은 명령을 실행하면 절차에 따라 손쉽게 https를 발급 받을 수 있다.\nsudo certbot --apache 이 때, 설치 중간에 다음과 같은 스크립트가 나오면, 2를 선택하면 된다. 이 경우, http 로 접속하여도 자동으로 https 로 리다이렉트 해준다.\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you\u0026#39;re confident your site works on HTTPS. You can undo this change by editing your web server\u0026#39;s configuration. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press \u0026#39;c\u0026#39; to cancel): 2 발급 완료 후 /etc/apache2/sites-available 혹은 /etc/apache2/sites-enabled 디렉토리에서 기존의 conf 를 열어보면 다음과 같은 스크립트가 추가적으로 붙은 것을 확인할 수 있다.\nRewriteEngine on RewriteCond %{SERVER_NAME} =wiki.xxx.xxx RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent] JIRA/Confluence HTTPS 프록시 연결 다시 돌아와서, scheme, proxyPort를 https에 맞게 고쳐줘야한다. Proxy 연결 이전에 인증서를 사전발급 받을 수도 있으나, 프록시 설정 후 한번, 인증서 설치 후 두번 고치는 편이 디버깅에 훨씬 유리하다. 위에서 설정한 Confluence 설정으로 다시 돌아와서, scheme과 proxyPort를 HTTPS에 맞게 고쳐준다. (*HTTP 기본 포트는 80, HTTPS 기본 포트는 443이다.)\nConfluence \u0026lt;Connector port=\u0026#34;8090\u0026#34; connectionTimeout=\u0026#34;20000\u0026#34; redirectPort=\u0026#34;8443\u0026#34; address=\u0026#34;localhost\u0026#34; maxThreads=\u0026#34;48\u0026#34; minSpareThreads=\u0026#34;10\u0026#34; enableLookups=\u0026#34;false\u0026#34; acceptCount=\u0026#34;10\u0026#34; debug=\u0026#34;0\u0026#34; URIEncoding=\u0026#34;UTF-8\u0026#34; protocol=\u0026#34;org.apache.coyote.http11.Http11NioProtocol\u0026#34; scheme=\u0026#34;https\u0026#34; secure=\u0026#34;true\u0026#34; proxyName=\u0026#34;wiki.xxx.xxx\u0026#34; proxyPort=\u0026#34;443\u0026#34;/\u0026gt; Jira \u0026lt;Connector port=\u0026#34;8080\u0026#34; relaxedPathChars=\u0026#34;[]|\u0026#34; relaxedQueryChars=\u0026#34;[]|{}^\\`\u0026#34;\u0026lt;\u0026gt;\u0026#34; maxThreads=\u0026#34;150\u0026#34; minSpareThreads=\u0026#34;25\u0026#34; connectionTimeout=\u0026#34;20000\u0026#34; enableLookups=\u0026#34;false\u0026#34; maxHttpHeaderSize=\u0026#34;8192\u0026#34; protocol=\u0026#34;HTTP/1.1\u0026#34; useBodyEncodingForURI=\u0026#34;true\u0026#34; redirectPort=\u0026#34;8443\u0026#34; acceptCount=\u0026#34;100\u0026#34; disableUploadTimeout=\u0026#34;true\u0026#34; bindOnInit=\u0026#34;false\u0026#34; secure=\u0026#34;true\u0026#34; scheme=\u0026#34;https\u0026#34; proxyName=\u0026#34;jira.xxx.xxx\u0026#34; proxyPort=\u0026#34;443\u0026#34;/\u0026gt; 위에서와 마찬가지로 서비스를 재시작한 후 서비스 설정에서 다음 작업을 한다.\n\u0026lsquo;서버\u0026rsquo; 설정탭에서 Base URL들을 모두 https://\u0026hellip;로 고쳐준다. **어플리케이션 연결(Application Link)**도 모두 무효화 된 상태이므로, 참조하여 모두 갱신한다. 추가 - crontab을 이용한 인증서 자동갱신 let\u0026rsquo;s encrypt 로 발급받은 인증서의 유효기간은 3개월이다. 따라서, 정기적으로 인증서를 갱신해줄 필요가 있다. 제일 간편한 Crontab 을 사용하여 일정 주기마다 renew 스크립트를 실행하도록 설정했다. (아래의 경우, 매 1월 1시마다 인증서를 갱신하며, 아파치를 재실행해준다.)\n0 1 1 * * root /usr/bin/certbot renew —quiet —renew-hook \u0026#34;service apache2 reload\u0026#34; ","permalink":"https://fedaeho.github.io/posts/2019-09-15-atlassian-proxy/","summary":"팀에서 운영하고 있는 Jira, Confluence 가 외부 접속이 가능함에도 불구하고 HTTPS 인증서가 설치되어 있지 않았다. 이외에도 보안상 취약점이 여럿 발견되었기에, Apache Proxy 설정 을 참고하여 설정하였다.\nVirtualHost 구성하기 팀에서 운영하는 Jira/Confluence 는 Atlassian 설정 파일을 외부 접근 가능한 주소로 바꾸고 DNS 업체에 해당 주소에 맞게 도메인만 물리고 포트 번호를 숨기지 않았다. 따라서, 포트번호 없이 기본 주소로 요청이 올 때도 Jira/Confluence 서비스인 것처럼 처리하기 위해 Apache VirtualHost 를 구성해서 리버스 프록시를 만들기로 했다.","title":"Jira, Confluence 에 HTTPS 달기 - Apache Proxy 구성"},{"content":"Particle-based simulation of plasmas 1. Types of interacting systems 1.1 weakly/stronly interacting system Consider a system\nCollection of charged ptcls. in a box box with the side of the $\\lambda_D$ measure E-field at local pt. Strongly coupled system\nIf few particles exist,measurement would be very jumpy. As a ptcl passes by the detector, the measurement detects a jump up. When a ptcl moves away it detects a jump down. On avg, at any give time, very few ptcls are near the detector. Their positions determine the value measured. evolution is determined by the close encounters and by the relative configuration of any two pairs of particles. characteristic feature : presence of a succession of collision. Weakly coupled system\nFor many ptcls, At any given pt., # of ptcls. contributing to the E-field. \u0026ldquo;Regardeless of the ptcl motion\u0026rdquo;, field is given. Effects of all ptcls. averaged, steady measurement. smooth trajectories characteristic feature : \u0026ldquo;mean field\u0026rdquo; 1.2 Strength of interaction number of particles in debye sphere : $N_D = n \\lambda_D^3$ Large : strongly coupled small : weakly coupled On avg., volume associated with each ptcl : $V_p = n^{-1} -\u0026gt;avg. interparticle distance $a=V_p^{1/3}\\equiv n^{-1/3}$ Electrostatic potential : $E_{pot}=\\frac{q^2}{4\\pi \\varepsilon_0 a}$ (assume equal charge) K.E. , of the order of thermal E : $E_{th}=kT$ Plasma coupling parameter : $\\Gamma=\\frac{E_{pot}}{E_{th}}=\\frac{q^2}{4\\pi \\varepsilon_0 a kT}\\equiv \\frac{1}{4\\pi N_D^{2/3}}$ When $N_D \\uparrow$, $\\Gamma \\downarrow $ : K.E \u0026gt; P.E : weakly coupled system When $N_E \\downarrow$, $\\Gamma \\uparrow$ : K.E \u0026lt; P.E : strongly coupled system 2. Computer simulation of interacting systems PP(particle-particle) approach PIC (Particle In Cell method) (or, Pm : Particle-Mesh) simply following each ptcl. in the system reduce the description to a \u0026ldquo;statistical sample of particles\u0026rdquo; N particles with N eq. of motion superparticle : collective clouds of particles strongly coupled system weakly coupled system 3. PIC method kinetic description of a plasma EM field \u0026amp; dist. fcn. $f_s(\\vec{x},\\vec{v},t)$ : dist fcn. no. of ptcl at time t in the infinitesimal space of $(d\\vec{x},d\\vec{v})$ around $(\\vec{x},\\vec{v})$ prob. of ptcl. in phase-space Start from \u0026ldquo;Boltzmann eq\u0026rdquo; $$ \\frac{\\partial f_s}{\\partial t} + \\vec{v}\\cdot\\frac{\\partial f_s}{\\partial \\vec{x}}+\\frac{q_s}{m_s}(\\vec{E}+\\vec{v}\\times\\vec{B})\\cdot\\frac{\\partial f_s}{\\partial \\vec{v}}=\\left[ \\frac{\\partial f_s}{\\partial t} \\right]_{coll} $$\nEM field from 2 curl eq. $$ \\begin{align} \u0026amp;\\nabla\\times\\vec{E}=-\\frac{\\partial \\vec{B}}{\\partial t} \\ \u0026amp;\\nabla \\times \\vec{B}=\\mu_0 \\varepsilon_0 \\frac{\\partial \\vec{E}}{\\partial t} + \\mu_0 \\vec{J} \\end{align} $$\n$\\rho(\\vec{x},t)=\\sum_s q_s \\int f_s(\\vec{x},\\vec{v},t)d\\vec{v}$ $\\vec{J}(\\vec{x},t)=\\sum_s q_s \\int \\vec{v}f_s(\\vec{x},\\vec{v},t)d\\vec{v}$ 3.1 Mathematical Formulation of PIC PIC : representation of the dist fcn. of each species by a superposition of moving elements\nAssume dist. fcn. of each species $s$ is given by the superposition of computational particles\n$$ f_s(\\vec{x},\\vec{v},t)=\\sum_p f_p(\\vec{x},\\vec{v},t) $$\nassigning a specific fcn. form for dist. of computational ptcl, for solving Vlasov eq.\nStandard PIC\n2 free parameter for each spatial dim. position and velocity More advanced\n+evolving shape of the super ptcl Standard PIC\nTensor product of the shape in each direction of phase space $$ f_p(\\vec{x},\\vec{v},t)=N_pS_{\\vec{x}}(\\vec{x}-\\vec{x_p}(t))S_{\\vec{v}}(\\vec{v}-\\vec{v_p}(t)) $$ $S_{\\vec{x}}$, $S_{\\vec{v}}$ : shape fcn. $N_p$ : no. of physical ptcls in the superparticle Shape fcn.\nsupport is compact (closed and bounded : 0 outside, small range in phase space) normalization $$ \\int S_{\\xi} (\\xi-\\xi_p)d\\xi = 1 $$ (not necessary) suggests to choose symmetric shape $$ S_\\xi(\\xi-\\xi_p)=S_\\xi(\\xi_p-\\xi) $$ 3.2. Selection of the ptcl shape For the velocity, PIC generally assume dirac-delta $$ S_{\\vec{v}}(\\vec{v}-\\vec{v_p})=\\delta(v_x-v_{xp})\\delta(v_y-v_{yp})\\delta(v_z-v_{zp}) $$ all ptcls in the superparticle has same velocity -\u0026gt; remain closer in phase space during evolution commonly used shape fcn. : based on b-splines 1st b-spline : flat-top fcn. $$ b_0(\\xi)=\\begin{cases} 1 \u0026amp; |\\xi|\u0026lt;1/2 \\ 0 \u0026amp; otherwise\\end {cases} $$ subsequent b-splines : successive integration $$ b_l(\\xi)=\\int_{-\\infty}^{\\infty} d\\xi\u0026rsquo; b_0(\\xi-\\xi\u0026rsquo;)b_{l-1}(\\xi\u0026rsquo;) $$ properties sum over all pts of b-spline on a step 1 uniform grid is 1, regardless shifting $$ \\sum_i b_l(\\xi+i)=1 $$ normalization $$ \\int_{-\\infty}^{\\infty}b_l(\\xi)d\\xi=1 $$ $\\delta(\\xi)=b_{-1}(\\xi)$ shape fcn. base on b-splines in PIC methods $$ S_{\\vec{x}}(\\vec{x}-\\vec{x_p})=\\frac{1}{\\Delta x_p \\Delta y_p \\Delta z_p} b_l \\left(\\frac{x-x_p}{\\Delta x_p}\\right) b_l \\left(\\frac{y-y_p}{\\Delta y_p}\\right) b_l \\left(\\frac{z-z_p}{\\Delta z_p}\\right) $$ common choice : order 0 : uniform square clound in cell 4. PIC simulation Simplest case : 1D and electrostatic Electrons being followed as particles but ions forming a fixed background of uniform density. This is justified by the heavy mass of the ions. 4.1 Initialization Setting up jupyter notebook environment Import some python library Initialize definition of the simulation Discretize in terms of domain size and of the grid Set time step with the number of cycles to be run Define Plasma density Here use normalized units : plasma freq is unitary Charge neutral : The ion uniform background is set to exactly balance the charge of the particles from IPython.core.interactiveshell import InteractiveShell InteractiveShell.ast_node_interactivity = \u0026#34;all\u0026#34; # \u0026#39;all\u0026#39; | \u0026#39;last\u0026#39; | \u0026#39;last_expr\u0026#39; | \u0026#39;none\u0026#39; %config InlineBackend.figure_format = \u0026#39;retina\u0026#39; from IPython.display import HTML import numpy as np import pandas as pd from scipy import sparse from scipy.sparse import linalg import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation, FFMpegFileWriter # Simulation parameters L = 10*np.pi # Domain size N = NG * 200 # Number of particles (200 per cell for example) dx = L / NG # Cell size WP = 1. # Plasma frequency QM = -1. # Charge/mass ratio Q = WP**2 / (QM*N/L) # rho0*L/N: charge carried by a single particle rho_back = -Q*N/L # Background charge density 4.2 Particle Initialization Example : two-stream instability\ntwo equal beams of initial electrons opposite mean velocity but equal density and thermal speed We can add perturbation to excite the desired mode (of sine function)\n#Particle initial properties V0 = 0.2 # Stream velocity VT = 0.0000001 # Thermal speed # perturbation XP1 = 1.0 mode = 1 # particles (electrons) xp = np.linspace(0, L-L/N, N).T # Particle positions vp = VT * np.random.randn(N) # Particle momentum, initially Maxwellian pm = np.arange(N) pm = 1 - 2 * np.mod(pm+1, 2) # Even and odd particles have opposite speed vp += pm * V0 # Momentum + stream velocity np.random.shuffle(vp) # We reshuffle the indices to avoid any bias # Add electron perturbation to excite the desired mode xp += XP1 * (L/N) * np.sin(2 * np.pi * xp / L * mode) xp[np.where(xp \u0026lt; 0)] += L xp[np.where(xp \u0026gt;= L)] -= L 4.3 Grid Initialization In the 1D electrostatic limit, the Maxwell equations reduce to just the Poisson equation:\n$$ -\\varepsilon_0 \\nabla^2 \\phi = e(n_i - n_e) $$\n$n_i$ : uniform background ion density $n_e$ : the electron density projected to the grid from the particles Discretize laplacian using simple finite difference method $$ -\\varepsilon_0 (\\phi_{i+1} + \\phi_{i-1} - 2\\phi_i) = e(n_i-n_e)\\Delta_x^2 $$\nThe potential is computed in the cell centres.\nThe continuum is subdivided in cells indexed by $i \\in [0, NG-1]$\nBoundary condition\nPeriodic boundary Potential is defined as a negative constant potential in the last cell is 0 The number of unknown potentials then is just NG-1. Resulting matrix : -2 on the diagonal \u0026amp; 1 on the neighbouring diagonal # Auxiliary vectors p = np.concatenate([np.arange(N), np.arange(N)]) # Particle indices up to N Poisson = sparse.spdiags(([1, -2, 1] * np.ones((1, NG-1), dtype=int).T).T, [-1, 0, 1], NG-1, NG-1) Poisson = Poisson.tocsc() 4.4 Main Cycle Four steps for each cycle Advance the position Compute the density from projected particle to the grid Solve Poission equation Compute electric field \u0026amp; force Advance the particle velocity def cycle(xp,vp): # update particle position xp xp += vp * DT # Periodic boundary condition xp[np.where(xp \u0026lt; 0)] += L xp[np.where(xp \u0026gt;= L)] -= L # Project particles-\u0026gt;grid csi = xp/dx g1 = np.floor(csi - 0.5) # Distance from the centre of the cell g = np.concatenate((g1, g1+1)) fraz1 = 1 - np.abs(xp/dx - g1 - 0.5) fraz = np.concatenate((fraz1, 1-fraz1)) g[np.where(g \u0026lt; 0)] += NG g[np.where(g \u0026gt; NG-1)] -= NG mat = sparse.csc_matrix((fraz, (p, g)), shape=(N, NG)) rho = Q / dx * mat.toarray().sum(axis=0) + rho_back # Compute electric field potential Phi = linalg.spsolve(Poisson, -dx**2 * rho[0:NG-1]) Phi = np.concatenate((Phi,[0])) # Electric field on the grid Eg = (np.roll(Phi, 1) - np.roll(Phi, -1)) / (2*dx) # interpolation grid-\u0026gt;particle and velocity update vp += mat * QM * Eg * DT 4.5 Diagnostics Particle diagnostics\nPhase space plot : $x_p vs. v_p$ Velocity Distribution function : histogram of particle counts in energy bins Field diagnostics\nElectric filed on the grid vs. time FFT modes of the filed quantites Other information\nTotal Kinetic Energy : $E_k = \\frac{1}{2} \\sum_p m_p v_p^2$ Total Momentum : $P = \\sum_p m_p v_p$ Total Energy of the field : $E_E = \\Delta x \\sum_c \\frac{\\varepsilon_0 E^2}{2} \\equiv \\Delta x \\sum_c \\frac{\\rho \\phi}{2}$ # Preparation for phase space plot fig = plt.figure() ax = plt.axes(xlim=(0, 30), ylim=(-3, 3)) line, = ax.plot([], [], lw=2) plt.xlabel(\u0026#39;x\u0026#39;) plt.ylabel(\u0026#39;velocity\u0026#39;) plotlays, plotcols = [2], [\u0026#34;blue\u0026#34;,\u0026#34;red\u0026#34;] lines = [] for index in range(2): lobj = ax.plot([],[],\u0026#39;.\u0026#39;,lw=2,color=plotcols[index])[0] lines.append(lobj) # initialization function: plot the background of each frame def init(): for line in lines: line.set_data([],[]) return lines adr1=np.where(vp\u0026gt;=0) adr2=np.where(vp\u0026lt;0) x1,y1 = [],[] x2,y2 = [],[] def updatefig(*args): cycle(xp,vp) xlist=[xp[adr1], xp[adr2]] ylist=[vp[adr1], vp[adr2]] #for index in range(0,1): for lnum,line in enumerate(lines): line.set_data(xlist[lnum], ylist[lnum]) # set data for each line separately. return lines anim = FuncAnimation(fig, updatefig, init_func=init, frames=NT, interval=1, blit=True) HTML(anim.to_jshtml()) ","permalink":"https://fedaeho.github.io/posts/2018-06-12-pic/","summary":"Particle-based simulation of plasmas 1. Types of interacting systems 1.1 weakly/stronly interacting system Consider a system\nCollection of charged ptcls. in a box box with the side of the $\\lambda_D$ measure E-field at local pt. Strongly coupled system\nIf few particles exist,measurement would be very jumpy. As a ptcl passes by the detector, the measurement detects a jump up. When a ptcl moves away it detects a jump down. On avg, at any give time, very few ptcls are near the detector.","title":"PIC"},{"content":"Virtualenv Python은 한 라이브러리 묶음에 한가지 버전만 사용 가능하다. 따라서 어떤 프로그램이 특정한 라이브러리와 특정한 Python 버전을 필요로 한다면(이를 denpendency, 한국어로 의존성이라고 한다), 파이썬을 따로 설치하는 방법 밖에 없다.\nsudo 가 아닌 일반 유저가 서버에서 Python을 사용하는 경우, 일반적으로는 서버에 설치되어 있는 Python 버전만이 사용가능하다. 2018년 기준으로 대부분 서버에서 기본으로 설정되어있는 Python 버전은 2.7 과 3.6 이다.\n이러한 Python 버전과 패키지를 각각의 유저가 원하는 환경에 맞추어 관리하기 위해서는 주로 다음과 같은 방법이 사용된다.\nConda 기본적으로 의존성을 검증한 패키지만을 설치할 수 있으므로, 안정성이 높다. 프로그래밍 지식이 부족한 경우에도 가장 간편하게 설치할 수 있다. Virtualenv 의존성을 검증하지 않은 다양한 패키지를 설치할 수 있다. Conda에 비해 가볍다. (독립된 env를 만들어주기만 할 뿐, 나머지는 사용자 재량이다.) 단점 가장 기본적인 만큼 pip 등의 파이썬 환경에 대한 이해가 필요하다. wrapper 등이 없으면 사용하기 불편하다. Docker 다른 방법에 비해서 훨씬 범위가 크다. (Python 이 아닌, OS 스케일에서의 환경을 제공하므로, CUDA 버전 또한 별개로 관리가 가능하다.) Virtual machine 이 아니고, 따라서 메모리나 CPU를 항상 점유하지 않아도 되지만, VM과 같은 명령 실행 환경을 제공한다. 단점 Learning Cost 가 크다. - 파일 이동 시에도 별도의 명령어를 사용하거나, 공유 폴더를 생성하는 등의 방법을 필요로 한다. 참고 : 개발자가 처음 docker 접할때 오는 멘붕 몇가지/ Virtualenvwrapper 설치 Vitualenv는 Python 패키지 환경을 시스템 환경 혹은 유저 환경과 독립적으로 제공하고 분리하여, 어플리케이션 별로 의존성이 다른 환경을 가상으로 만들어내고, 각각의 env를 개별적으로 관리할 수 있는 이점이 있다. 단, 일반적인 virtualenv를 사용하는 경우, env가 설치되어 있는 폴더명을 직접 입력하여, env를 activate 해야한다. 이 때, virtualenvwrapper 를 이용하면 env를 좀 더 간편하게 실행할 수 있다.\n우분투 터미널에서 아래의 명령어를 입력한다. (pip는 이미 설치되어있다고 가정한다.) 이 때, pip 에서 사용된 --user 옵션은 사용자 디렉토리에 패키지를 설치하라는 뜻이다. virtualenvwrapper 의 경우, env를 관리해주는 패키지므로 모든 유저가 사용할 수 있도록 root 권한으로 설치하여도 무방하다.\n$ pip install --user virtualenvwrapper $ sudo -H pip install virtualenvwrapper # sudo 권한 있을시 터미널에서 which virtualenv 를 입력해보면 다음과 같이 virtualenv가 설치된 디렉토리를 확인할 수 있다. (user 옵션을 사용하지 않았다면, 다른 디렉토리가 나올 것이다.)\n$ /home/user/.local/bin/virtualenv $ /usr/local/bin/virtualenv # sudo -H 옵션으로 설치시 이 상태에서는 터미널에서 virtualenv 관련 명령어를 입력해도 작동하지 않는다. 이를 위해 bash 환경설정에서 virtualenv 가 설치되어있는 PATH를 추가해준다.\n$ vi ~/.bashrc # 열린 메모장 마지막에 다음 코드 3줄 추가 export WORKON_HOME=~/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=\u0026#34;$(which python3)\u0026#34; source ~/.local/bin/virtualenvwrapper.sh # virtualenv setting, sudo 일 경우 export WORKON_HOME=~/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=\u0026#34;$(which python3)\u0026#34; source /usr/local/bin/virtualenvwrapper.sh $ source ~/.bashrc # 변경한 설정을 구동함 이제, env를 만든다. env_name 은 사용자가 원하는 것으로 지정한다. 따로 python 버전을 지정하지 않는 경우, 서버에 설치되어있는 기본 버전을 따른다.\n$ mkvirtualenv env_name 만일 env 가 잘 만들어졌다면, 다음과 같이 터미널이 변경되어 있을 것이다.\n(env_name)user_name@server:~$ env 실행 및 종료는 다음과 같다.\n$ deactivate #env 종료 $ workon env_name #env 실행 Python 버전 지정해서 설치하기 이 때, env 에 설치되는 python 버전은 서버의 기본 python 버전과 동일하다. 만일 다른 python 버전을 설치하고 싶다면 다음과 같이 입력한다.\n$ mkvirtualenv -p python2.7 env_name $ mkvirtualenv --python=python3.6 env_name 다른 Env에서 패키지 불러오기 #패키지를 불러오려는 env에서 다음과 같이 입력 $ pip freeze \u0026gt;requirements.txt #패키지를 설치하려는 env에서 다음과 같이 입력 $ pip install -r requirements.txt #또는 env를 만들 때 -r 옵션을 추가해도 됨. $ mkvirtualenv -p python3.6 env_name -r requirements.txt pip를 이용한 Package 설치 및 관리 일반적인 python package는 pip 를 통해 간편하게 설치가 가능하다. 아래의 pkg_name에 원하는 패키지 이름을 입력하기만 하면된다.\n(* conda env 에서도 pip를 이용할 수 있다.) (** 패키지 설치시에는 env가 실행되어 있는 상태여야 한다.)\n$ pip install pkg_name 이외에, 간혹 env에 패키지를 추가적으로 설치하지 않고 시스템에 설치되어 있는 패키지를 사용하고 싶을 때가 있다. 이 때, 아래와 같이 env가 활성화 되어 있는 상태에서 명령어를 입력하면 global 패키지, 즉 user 에 귀속되거나, 시스템 자체에 귀속된 라이브러리를 그대로 사용할 수 있다. (이미 toggle 되어있는 경우, ...disabled 이라는 출력이 나오면서 해제되니 유의할 것)\n$ toggleglobalsitepackages ","permalink":"https://fedaeho.github.io/posts/2018-08-17-python-env-guide/","summary":"Virtualenv Python은 한 라이브러리 묶음에 한가지 버전만 사용 가능하다. 따라서 어떤 프로그램이 특정한 라이브러리와 특정한 Python 버전을 필요로 한다면(이를 denpendency, 한국어로 의존성이라고 한다), 파이썬을 따로 설치하는 방법 밖에 없다.\nsudo 가 아닌 일반 유저가 서버에서 Python을 사용하는 경우, 일반적으로는 서버에 설치되어 있는 Python 버전만이 사용가능하다. 2018년 기준으로 대부분 서버에서 기본으로 설정되어있는 Python 버전은 2.7 과 3.6 이다.\n이러한 Python 버전과 패키지를 각각의 유저가 원하는 환경에 맞추어 관리하기 위해서는 주로 다음과 같은 방법이 사용된다.","title":"Virtualenvwrapper 로 python virtualenv 설정하기"}]